{
  "Description": "VGH Puppet v0.0.1",

  "Parameters": {
    "EnvType": {
      "Type": "String",
      "Description": "Environment type",
      "Default": "production"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Amazon EC2 key pair"
    },
    "AssetsBucket": {
      "Type": "String",
      "Description": "The S3 bucket containing the assets"
    },
    "PuppetCertificatesBucket": {
      "Type": "String",
      "Description": "The S3 bucket containing the SSL certificates for Puppet"
    },
    "PuppetMaster": {
      "Type": "String",
      "Description": "The address of the Puppet Master server"
    },
    "ZeusAMIId": {
      "Type": "String",
      "Description": "The AMI Id for the Zeus ASG"
    },
    "ZeusDesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "The AMI Id for the Zeus ASG"
    },
    "PuppetServerDesiredCount": {
      "Type": "Number",
      "Default": "1",
      "Description": "The AMI Id for the Zeus ASG"
    },
    "SSHLocations": {
      "Type": "CommaDelimitedList",
      "Description": "The IP address ranges that can be used to SSH to the EC2 instances"
    },
    "DBEngine": {
      "Default": "mariadb",
      "Description": "MySQL engine",
      "Type": "String",
      "AllowedValues": ["MySQL", "mariadb", "postgres"],
      "ConstraintDescription": "must select a valid database engine"
    },
    "DBName": {
      "Default": "myDatabase",
      "Description": "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser": {
      "NoEcho": "true",
      "Description": "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description": "Password for MySQL database access",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "SSLCertificateId": {
      "Description": "The ARN of the SSL certificate to use",
      "Type": "String"
    },
    "VPCTemplateURL": {
      "Type": "String",
      "Description": "The URL of the template for the VPC nested stack"
    },
    "SGTemplateURL": {
      "Type": "String",
      "Description": "The URL of the template for the SG nested stack"
    },
    "IAMTemplateURL": {
      "Type": "String",
      "Description": "The URL of the template for the IAM nested stack"
    },
    "RDSTemplateURL": {
      "Type": "String",
      "Description": "The URL of the template for the RDS nested stack"
    }
  },

  "Resources": {
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [{"Fn::GetAtt": ["SG", "Outputs.ELBSecurityGroup"]}],
        "Subnets": [
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet1"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet2"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet3"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet4"]}
        ],
        "CrossZone": "true",
        "Listeners": [
          {"LoadBalancerPort": "443", "Protocol": "HTTPS", "InstancePort": "80", "InstanceProtocol": "HTTP", "SSLCertificateId": {"Ref": "SSLCertificateId"}},
          {"LoadBalancerPort": "8140", "Protocol": "TCP", "InstancePort": "8140", "InstanceProtocol": "TCP"}
        ],
        "HealthCheck": {
          "Target": "HTTPS:8140/puppet-ca/v1/certificate/ca",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "6",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionDrainingPolicy": {"Enabled": "true", "Timeout": "60"}
      }
    },

    "Zeus": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "LaunchZeusInstance"},
        "VPCZoneIdentifier": [
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet1"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet2"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet3"]},
          {"Fn::GetAtt": ["VPC", "Outputs.Subnet4"]}
        ],
        "MinSize": "0",
        "MaxSize": "2",
        "DesiredCapacity": {"Ref": "ZeusDesiredCapacity"},
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "600",
        "Cooldown": "600",
        "LoadBalancerNames": [{"Ref": "ELB"}],
        "TerminationPolicies": ["OldestInstance", "Default"],
        "Tags": [
          {"Key": "Role", "Value": "zeus", "PropagateAtLaunch": "true"},
          {"Key": "Name", "Value": {"Fn::Join": ["-" , [{"Ref": "AWS::StackName"}, "Zeus"]]}, "PropagateAtLaunch": "true"}
        ]
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchZeusInstance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": "t2.micro",
        "KeyName": {"Ref": "KeyName"},
        "AssociatePublicIpAddress": "true",
        "ImageId": {"Ref": "ZeusAMIId"},
        "SecurityGroups": [{"Fn::GetAtt": ["SG", "Outputs.InstanceSecurityGroup"]}],
        "IamInstanceProfile": {"Fn::GetAtt": ["IAM", "Outputs.InstanceProfile"]},
        "UserData": {"Fn::Base64": {"Fn::Join": ["" , [
          "#!/usr/bin/env bash\n",
          "set -euo pipefail\n",
          "IFS=$'\\n\\t'", "\n",

          "# VARs\n",
          "export ENVTYPE=", {"Ref": "EnvType"}, "\n",
          "export PP_SERVER=", {"Ref": "PuppetMaster"}, "\n",
          "export PP_ROLE=zeus\n",
          "export PP_PROJECT=vpm\n",
          "export PP_AGENT_CERT_REGEN=true\n",
          "export PP_CERTNAME=\"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\"\n",
          "export AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "\n",
          "export AWS_DEFAULT_REGION=", {"Ref": "AWS::Region"}, "\n",
          "export AWS_ASSETS_BUCKET=", {"Ref": "AssetsBucket"}, "\n",
          "export AWS_CERTS_BUCKET=", {"Ref": "AssetsBucket"}, "-crt\n",
          "export AWS_ECS_CLUSTER=", {"Ref": "ECSCluster"}, "\n",
          "export AWS_IAM_INSTANCE_ROLE=", {"Fn::GetAtt": ["IAM", "Outputs.InstanceRole"]}, "\n",
          "export AWS_RDS_ENDPOINT=", {"Fn::GetAtt": ["RDS", "Outputs.DBEndpoint"]}, "\n",
          "export HOME=/root\n",

          "echo 'IN_PROGRESS' | tee /var/lib/cloud/instance/status_cfn\n",

          "echo 'Exit trap'\n",
          "signal_exit(){\n",
          "  /usr/local/bin/cfn-signal --exit-code ${1:-0}",
          "    --resource Zeus",
          "    --stack \"$AWS_STACK_NAME\"",
          "    --region \"$AWS_DEFAULT_REGION\"",
          "    || true", "\n",
          "}\n",
          "trap 'signal_exit $?' EXIT INT TERM\n",

          "echo 'Write facts'\n",
          "mkdir -p /etc/puppetlabs/facter/facts.d\n",
          "cat << EOF > /etc/puppetlabs/facter/facts.d/aws-env.yaml\n",
          "---\n",
          "aws_cfn_rds_db_endpoint: ${AWS_DEFAULT_REGION}\n",
          "EOF\n",

          "echo 'Mount S3 Certificates Bucket'\n",
          "echo \"${AWS_CERTS_BUCKET}  /opt/vpm/certificates  fuse.s3fs  _netdev,nonempty,allow_other,use_rrs,use_cache=/tmp,retries=5,iam_role=${AWS_IAM_INSTANCE_ROLE}  0  0\" >> /etc/fstab\n",
          "mkdir -p /opt/vpm/certificates && mount -a\n",

          "mountpoint -q /opt/vpm/certificates || ",
          "{ echo 'Certificates path is not mounted' >&2; exit 1 ;}\n",

          "echo 'Refresh VGS repo'\n",
          "cd /opt/vgs && git pull --all\n",

          "echo 'Refresh Puppet stack repo'\n",
          "cd /opt/vpm/puppet_stk && git pull --all\n",

          "echo 'Refresh Puppet control repo'\n",
          "cd /opt/vpm/puppet && git pull --all\n",

          "echo 'Refresh Docker images'\n",
          "docker pull vladgh/puppetserver\n",
          "docker pull vladgh/r10k\n",
          "docker pull gliderlabs/logspout\n",
          "docker pull amazon/amazon-ecs-agent:latest\n",

          "echo 'Re-bootstrap'\n",
          "bash /opt/vpm/puppet/bootstrap || true\n",

          "echo 'Deploy R10K environment'\n",
          "docker run --rm --name r10k-agent",
          " -v /opt/vpm/puppet/r10k.yaml:/etc/puppetlabs/r10k/r10k.yaml:ro",
          " -v /opt/vpm/puppet/bin/r10k-post-run:/etc/puppetlabs/r10k/post-run.sh:ro",
          " -v /opt/vpm/code/environments:/etc/puppetlabs/code/environments",
          " vladgh/r10k deploy environment --puppetfile --verbose\n",

          "echo 'Start the ECS agent'\n",
          "docker run --name ecs-agent",
          "  --privileged",
          "  --restart on-failure:10 -d",
          "  -v /var/run/docker.sock:/var/run/docker.sock",
          "  -v /var/log/ecs/:/log:Z",
          "  -v /var/lib/ecs/data:/data:Z",
          "  -v /var/lib/docker:/var/lib/docker",
          "  -p 51678:51678",
          "  -e ECS_LOGFILE=/log/ecs-agent.log",
          "  -e ECS_LOGLEVEL=info",
          "  -e ECS_DATADIR=/data",
          "  -e ECS_CLUSTER=${AWS_ECS_CLUSTER}",
          "  --hostname ecs-agent",
          "  amazon/amazon-ecs-agent:latest\n",

          "echo 'SUCCEEDED' | tee /var/lib/cloud/instance/status_cfn"
        ]]}}
      }
    },

    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "ECSTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "PuppetServer",
            "Image": "vladgh/puppetserver:latest",
            "Cpu": "512",
            "Memory": "768",
            "Essential": "true",
            "PortMappings": [
              {"ContainerPort": "8140", "HostPort": "8140"}
            ],
            "Hostname": "puppet.ghn.me",
            "Environment": [
              {"Name": "AUTOSIGN", "Value": "/etc/puppetlabs/csr/sign"},
              {"Name": "JAVA_ARGS", "Value": "-Xms768m -Xmx768m"}
            ],
            "MountPoints": [
              {
                "SourceVolume": "PuppetCode",
                "ContainerPath": "/etc/puppetlabs/code"
              },{
                "SourceVolume": "PuppetCA",
                "ContainerPath": "/etc/puppetlabs/puppet/ssl"
              },{
                "SourceVolume": "PuppetHiera",
                "ContainerPath": "/etc/puppetlabs/puppet/hiera.yaml"
              },{
                "SourceVolume": "PuppetCSRSign",
                "ContainerPath": "/etc/puppetlabs/csr/sign"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "PuppetCode",
            "Host": {"SourcePath": "/opt/vpm/code"}
          },{
            "Name": "PuppetCA",
            "Host": {"SourcePath": "/opt/vpm/certificates"}
          },{
            "Name": "PuppetHiera",
            "Host": {"SourcePath": "/opt/vpm/puppet/hiera.yaml"}
          },{
            "Name": "PuppetCSRSign",
            "Host": {"SourcePath": "/opt/vpm/puppet/bin/sign"}
          }
        ]
      }
    },
    "ECSService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["Zeus"],
      "Properties": {
        "Cluster": {"Ref": "ECSCluster"},
        "DesiredCount": {"Ref": "PuppetServerDesiredCount"},
        "DeploymentConfiguration": {
          "MaximumPercent" : "100",
          "MinimumHealthyPercent" : "0"
        },
        "LoadBalancers": [
          {
            "ContainerName": "PuppetServer",
            "ContainerPort": "8140",
            "LoadBalancerName": {"Ref": "ELB"}
          }
        ],
        "Role": {"Fn::GetAtt": ["IAM", "Outputs.ECSServiceRole"]},
        "TaskDefinition": {"Ref": "ECSTaskDefinition"}
      }
    },

    "VPC": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "VPCTemplateURL"}
      }
    },

    "SG": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "SGTemplateURL"},
        "Parameters": {
          "VPCId": {"Fn::GetAtt": ["VPC", "Outputs.VPCId"]},
          "SSHLocations": {"Fn::Join": [",", {"Ref": "SSHLocations"}]}
        }
      }
    },

    "IAM": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "IAMTemplateURL"},
        "Parameters": {
          "AssetsBucket": {"Ref": "AssetsBucket"},
          "PuppetCertificatesBucket": {"Ref": "PuppetCertificatesBucket"}
        }
      }
    },

    "RDS": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "RDSTemplateURL"},
        "Parameters": {
          "EnvType": {"Ref": "EnvType"},
          "SubnetIDs": {"Fn::Join": [",", [
            {"Fn::GetAtt": ["VPC", "Outputs.Subnet1"]},
            {"Fn::GetAtt": ["VPC", "Outputs.Subnet2"]},
            {"Fn::GetAtt": ["VPC", "Outputs.Subnet3"]},
            {"Fn::GetAtt": ["VPC", "Outputs.Subnet4"]}
          ]]},
          "SecurityGroups": {"Fn::GetAtt": ["SG", "Outputs.DBSecurityGroup"]},
          "DBEngine": {"Ref": "DBEngine"},
          "DBName": {"Ref": "DBName"},
          "DBUser": {"Ref": "DBUser"},
          "DBPassword": {"Ref": "DBPassword"}
        }
      }
    }
  },

  "Outputs": {
    "LoadBalancerURL": {
      "Description": "URL - The Load Balancer Public DNS",
      "Value": {"Fn::Join": ["", ["https://", {"Fn::GetAtt": ["ELB", "DNSName"]}]]}
    }
  }
}
