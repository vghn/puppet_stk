{
  "Description": "VGH RHEA v0.0.1",

  "Parameters": {
    "EnvType": {
      "Description": "The environment type",
      "Type": "String",
      "Default": "production"
    },
    "Version": {
      "Description": "The version number",
      "Type": "String",
      "Default": "0.0.0"
    },
    "KeyName": {
      "Description": "The name of the key pair used to log into the EC2 instance via SSH",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ImageID": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "The base image id"
    },
    "InstanceType": {
      "Description": "The instance type for the EC2 instance",
      "Type": "String",
      "Default": "t2.micro"
    },
    "IamInstanceProfile": {
      "Description": "The instance profile",
      "Type": "String"
    },
    "ElasticLoadBalancer": {
      "Type": "String",
      "Description": "The Elastic Load Balancer name"
    },
    "EFSVolumeID": {
      "Type": "String",
      "Description": "The id of the EFS volume"
    },
    "SubnetIDs": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of subnet ids"
    },
    "SecurityGroupIDs": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Description": "The list of security group ids"
    },
    "ControlRepoArchive": {
      "Description": "The S3 path for the puppet control repository",
      "Type": "String"
    }
  },

  "Resources": {
    "RheaASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "RheaLaunchConfig"},
        "VPCZoneIdentifier": {"Ref": "SubnetIDs"},
        "MinSize": "0",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "600",
        "Cooldown": "600",
        "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}],
        "TerminationPolicies": ["OldestInstance", "Default"],
        "Tags": [
          {"Key": "Role", "Value": "rhea", "PropagateAtLaunch": "true"},
          {"Key": "Name", "Value": "Rhea", "PropagateAtLaunch": "true"}
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "0",
          "MinSuccessfulInstancesPercent": "0",
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "RheaLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Version": {"Ref": "Version"},

        "AWS::CloudFormation::Init": {
          "configSets": {
            "Common": ["WriteFacts"],
            "Create": [{"ConfigSet": "Common"}, "ConfigureCF", "ConfigureNode", "StartVPM", "BootstrapNode"],
            "Update": [{"ConfigSet": "Common"}, "StartVPM", "UpdateNode"]
          },

          "WriteFacts": {
            "files": {
              "/etc/puppetlabs/facter/facts.d/aws.env.yaml": {
                "content": {"Fn::Join": ["", [
                  "---\n",
                  "vpm:\n",
                  "  version: ", {"Ref": "Version"}, "\n",
                  "  efs_volume_id: ", {"Ref": "EFSVolumeID"}
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },

          "ConfigureCF": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n",
                  "interval=1\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.RheaLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init",
                  "         --resource RheaLaunchConfig",
                  "         --configsets Update",
                  "         --stack ", {"Ref": "AWS::StackName"},
                  "         --region ", {"Ref": "AWS::Region"}, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "commands": {
              "01-start-hup": {
                "command": "/usr/local/bin/cfn-hup"
              }
            }
          },

          "ConfigureNode": {
            "commands": {
              "01_set_puppet_host": {
                "command": "/opt/puppetlabs/bin/puppet resource host puppet ip=\"$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\""
              },
              "02_set_certname": {
                "command": "/opt/puppetlabs/bin/puppet config set certname \"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\" --section main"
              },
              "03_patch_ssm_agent": {
                "command": "systemctl enable amazon-ssm-agent.service && systemctl restart amazon-ssm-agent.service"
              }
            }
          },

          "StartVPM": {
            "commands": {
              "01_reset_repo": {
                "cwd": "/opt/vpm",
                "command": "git fetch --all && git reset --hard origin/production"
              },
              "02_pull_images": {
                "cwd": "/opt/vpm",
                "command": "docker-compose pull"
              },
              "03_build_images": {
                "cwd": "/opt/vpm",
                "command": "docker-compose build"
              },
              "04_start_vpm": {
                "cwd": "/opt/vpm",
                "command": "docker-compose up -d"
              }
            }
          },

          "BootstrapNode": {
            "commands": {
              "01_wait_for_puppet_server": {
                "command": "until nc -z puppet 8140; do sleep 10; done; sleep 5"
              },
              "02_bootstrap_node": {
                "env": {
                  "PP_ROLE": "rhea",
                  "PP_PROJECT": "vgh",
                  "PP_APPLICATION": "vpm"
                },
                "command": "sudo -E /opt/vpm/bin/bootstrap"
              }
            }
          },

          "UpdateNode": {
            "commands": {
              "01_enter_standby": {
                "command": "bash -c '. /opt/vgs/load; nc -z puppet 8140 || vgs_aws_ec2_autoscaling_enter_standby'"
              },
              "02_wait_for_puppet_server": {
                "command": "until nc -z puppet 8140; do sleep 10; done; sleep 5"
              },
              "03_exit_standby": {
                "command": "bash -c '. /opt/vgs/load; vgs_aws_ec2_autoscaling_exit_standby'"
              }
            }
          }
        }
      },
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyName"},
        "AssociatePublicIpAddress": "true",
        "ImageId": {"Ref": "ImageID"},
        "SecurityGroups": {"Ref": "SecurityGroupIDs"},
        "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["" , [
          "#!/usr/bin/env bash\n",
          "set -euo pipefail\n",
          "IFS=$'\\n\\t'", "\n",

          "echo 'IN_PROGRESS' | tee /var/lib/cloud/instance/status_cfn\n",

          "signal_exit(){\n",
          "  echo 'Signal CloudFormation'\n",
          "  /usr/local/bin/cfn-signal --exit-code ${1:-0}",
          "    --resource RheaASG",
          "    --stack ", {"Ref": "AWS::StackName"},
          "    --region ", {"Ref": "AWS::Region"},
          " || true\n",
          "}\n",
          "trap 'signal_exit $?' EXIT INT TERM\n",

          "echo 'Update APT'\n",
          "while ! apt-get -qy update; do echo 'Waiting for APT'; sleep 1; done\n",

          "echo 'Ensure Python PIP is installed'\n",
          "command -v pip >/dev/null 2>&1 || apt-get -qy install python-pip\n",

          "echo 'Ensure CloudFormation helper scripts are installed'\n",
          "[[ -x /usr/local/bin/cfn-init ]] || pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

          "echo 'Run CloudFormation Init'\n",
          "/usr/local/bin/cfn-init",
          "  --resource RheaLaunchConfig",
          "  --configsets Create",
          "  --stack ", {"Ref": "AWS::StackName"},
          "  --region ", {"Ref": "AWS::Region"}, "\n",

          "echo 'SUCCEEDED' | tee /var/lib/cloud/instance/status_cfn"
        ]]}}
      }
    }
  }
}
