#!/usr/bin/env bash
# Stack CLI

# Load environment
# shellcheck disable=1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)/envrc"

# Usage
usage(){
  echo '---------------------------------------------'
  echo "USAGE: ${BASH_SOURCE[0]} [COMMAND] [SUBCOMMAND] [OPTIONS]"
  echo '---------------------------------------------'
  echo 'Commands:'
  echo ''
  echo '  - ami [build | clean | validate] [NAME]'
  echo '    * Allowed AMIs: prometheus'
  echo ''
  echo '  - deploy [stack name]'
  echo '    * Allowed stacks: vpm, monitor'
  echo ''
  echo '  - tf [COMMAND]'
  echo ''
  echo '----------------------------------------------'
  echo 'For more information please consult the README'
  echo '----------------------------------------------'
  exit 1
}

# Process Stack CLI
stack_process_cli(){
  if [[ -z $1 ]]; then usage; fi

  export cmd="${1:-}"; shift || true

  trap 'bye $?' EXIT HUP INT QUIT TERM
  case "$cmd" in
    ami)
      local scmd ami V
      scmd="${1:-}"
      ami="${2:-}"
      V=''
      case "$ami" in
        prometheus)
          export AWS_PROFILE='orion'
          AMI_FILE='ami/prometheus.json'
          AMI_NAME='Prometheus'
          V="${V} -var 'pp_secret=$(aws ssm get-parameter --with-decryption --name /puppet/vgh/secret --region us-east-1 --query Parameter.Value --output text --profile ursa)'"
          ;;
        *)
          usage
          ;;
      esac
      case "$scmd" in
        build)
          eval packer build "$V" "$AMI_FILE"
          ;;
        validate)
          eval packer validate "$V" "$AMI_FILE"
          ;;
        clean)
          eval amicleaner --mapping-key name --mapping-values "${AMI_NAME}" --full-report --keep-previous 1
          ;;
        *)
          usage
          ;;
      esac
      ;;
    deploy)
      local stack="${1:-}"
      case "$stack" in
        vpm)
          export SSH_HOST='rhea.ghn.me'
          deploy_swarm "$stack"
          ;;
        monitor)
          export SSH_HOST='prometheus.ghn.me'
          deploy_swarm "$stack"
          ;;
        *)
          usage
      esac
      ;;
    tf)
      (
        cd "${APPDIR}/terraform" || true
        case "${1:-}" in
          apply|import|plan|push|refresh|validate)
            terraform "${@:-}"
            ;;
          *)
            terraform "${@:-}"
            ;;
        esac
      )
      ;;
    test)
      echo 'Run ShellCheck'
      find ./bin ./shlib -type f -exec shellcheck {} +
      echo 'Validate Packer Images'
      ./bin/stack ami validate prometheus
      echo 'Validate Terraform'
      ./bin/stack tf init
      ./bin/stack tf validate
      ;;
    *)
      usage
      ;;
  esac
}

stack_process_cli "${@:-}"
