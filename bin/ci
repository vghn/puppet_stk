#!/usr/bin/env bash
# Continuous Integration / Continuous Deployment tasks

# Load environment
# shellcheck disable=1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)/envrc"

# VARs
DOCKER_PROJECT='vpm'
SSH_HOST='rhea.ghn.me'
SSH_USER='ubuntu'
SSH_KEY=$(mktemp 2>/dev/null || mktemp -t 'tmp')
PACKER_URL='https://releases.hashicorp.com/packer/1.0.3/packer_1.0.3_linux_amd64.zip'

# Install the VGS Library
install_vgs(){
  echo 'Install and load VGS library'
  git clone https://github.com/vghn/vgs.git ~/vgs
  # shellcheck disable=1090
  . ~/vgs/load 2>/dev/null || true
}

# Install gems
install_gems(){
  echo 'Install gems'
  bundle install --without development --path vendor/bundle
}

# Install AWS Command Line
install_aws_cli(){
  echo 'Install AWS-CLI'
  pip install --user --upgrade awscli
}

# Install HashiCorp Packer
install_packer(){
  echo 'Install HashiCorp Packer'
  curl -L -o packer.zip "$PACKER_URL"
  unzip -d ~/bin packer.zip
}

# Validate BASH scripts
validate_bash(){
  e_info 'Validate BASH scripts'
  find ./bin -type f -exec shellcheck {} +
}

# Validate CloudFormation templates
validate_cfn(){
  e_info 'Validate CloudFormation templates'
  find ./cfn \( -name '*.yaml' -o -name '*.json' \) -exec sh -c \
    'echo "Checking ${1}" && aws cloudformation validate-template --template-body "file://${1}" --output table' \
    -- {} \;
}

# Validate AMIs
validate_amis(){
  e_info 'Validate AMIs'
  eval "${APPDIR}/bin/ami" validate
}

# Set-up SSH
ssh_setup(){
  e_info 'Set-up SSH key'
  echo "$DEPLOY_RSA" | base64 --decode --ignore-garbage > "$SSH_KEY"
  chmod 600 "$SSH_KEY"

  e_info 'Update known hosts'
  ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

  SSH_CMD="ssh -i ${SSH_KEY} ${SSH_USER}@${SSH_HOST}"
}

# Upload project files
upload_project(){
  ssh_setup

  e_info 'Create project folder'
  eval "$SSH_CMD" "sudo mkdir -p ${project_folder}"

  e_info 'Upload project files'
  rsync -avz -e "ssh -i ${SSH_KEY}" \
    --rsync-path 'sudo rsync' \
    --prune-empty-dirs --delete --delete-excluded --recursive \
    --include '*/' \
    --include '/docker-compose.yml' \
    --exclude "*" \
    . "${SSH_USER}@${SSH_HOST}:${project_folder}"
}

# Deploy RHEA (rsync docker-compose project files)
deploy_rhea_compose_rsync(){
  project_folder='/var/local/vpm'
  compose_file="${project_folder}/docker-compose.yml"

  upload_project

  e_info 'Update docker-compose'
  eval "$SSH_CMD" "docker-compose --project-name ${DOCKER_PROJECT} --file ${compose_file} pull --parallel"
  eval "$SSH_CMD" "docker-compose --project-name ${DOCKER_PROJECT} --file ${compose_file} up -d --build --remove-orphans"
}

# Deploy RHEA (docker-compose mode)
deploy_rhea_compose(){
  ssh_setup

  e_info 'Update docker-compose'
  ( eval "$SSH_CMD" "docker-compose --project-name ${DOCKER_PROJECT} --file /dev/stdin pull" ) < docker-compose.yml
  ( eval "$SSH_CMD" "docker-compose --project-name ${DOCKER_PROJECT} --file /dev/stdin up -d --build --remove-orphans" ) < docker-compose.yml
}

# Deploy RHEA (docker swarm mode)
deploy_rhea_swarm(){
  ssh_setup

  e_info 'Deploy stack'
  ( eval "$SSH_CMD" "docker stack deploy --compose-file /dev/stdin ${DOCKER_PROJECT}" ) < stack.yml
}

# Create secret
# Ex:
# $ bin/ci create_secret mysecret < mysecret_file
# $ echo 'password' | bin/ci create_secret mysecret

create_secret(){
  ssh_setup

  local name="${1:?}"
  eval "$SSH_CMD" "docker secret create ${name} /dev/stdin"
}

# CI Deploy
deploy(){
  if [[ "$ENVTYPE" == 'production' ]] && [[ "${TRAVIS_PULL_REQUEST:-false}" == 'false' ]]; then
    deploy_rhea_swarm
  else
    e_warn 'Deployment is only allowed in production!'
  fi
}

# Clean-up
clean_up() {
  if [[ -s "$SSH_KEY" ]]; then
    if [[ "$SSH_KEY" =~ tmp. ]]; then
      e_info 'Removing temporary ssh key'
      rm -rf "${SSH_KEY:?}"
    else
      e_warn 'Could not remove temporary ssh key'
    fi
  fi
}

# Trap exit
bye(){
  e_info 'Clean-up'
  clean_up; exit "${1:-0}"
}


main(){
  trap 'bye $?' EXIT HUP INT QUIT TERM

  # Process arguments
  case "${1:-}" in
    install)
      install_vgs
      ;;
    test)
      validate_bash
      ;;
    deploy)
      deploy
      ;;
    create_secret)
      shift
      create_secret "${@}"
      ;;
    *)
      e_abort "USAGE: ${BASH_SOURCE[0]} [install | test | deploy]"
      ;;
  esac
}

main "${@:-}"
