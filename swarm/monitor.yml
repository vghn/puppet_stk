version: '3.7'

services:
  lb:
    image: traefik:1.7
    hostname: lb-prometheus
    command: >-
      --configfile=/dev/null
      --web --web.address=0.0.0.0:8888
      --docker --docker.swarmmode --docker.domain=traefik --docker.watch
      --defaultentrypoints=http,https
      --entryPoints="Name:http Address::80 Redirect.EntryPoint:https"
      --entryPoints="Name:https Address::443 TLS"
      --acme --acme.email=webmaster@ghn.me
      --acme.domains=prometheus.ghn.me,logs.ghn.me,monitor.ghn.me
      --acme.tlsChallenge
      --acme.entryPoint=https
      --acme.storage=/certs/acme.json
    ports:
      - '80:80'
      - '443:443'
      - '8888:8888'
    volumes:
      - /data/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
      - backend
    labels:
      container_group: monitoring
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  grafana:
    image: grafana/grafana:5.4.0
    hostname: grafana
    environment:
      GF_SERVER_ROOT_URL: https://prometheus.ghn.me
      GF_SMTP_ENABLED: 'true'
      GF_SMTP_HOST: smtp.sendgrid.net:587
      GF_SMTP_FROM_ADDRESS: admin@ghn.me
      GF_SMTP_FROM_NAME: Prometheus
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_security_admin_password
      GF_SMTP_USER_FILE: /run/secrets/grafana_smtp_user
      GF_SMTP_PASSWORD_FILE: /run/secrets/grafana_smtp_password
    secrets:
      - source: grafana_security_admin_password_v1
        target: grafana_security_admin_password
      - source: grafana_smtp_user_v1
        target: grafana_smtp_user
      - source: grafana_smtp_password_v1
        target: grafana_smtp_password
    volumes:
      - /data/grafana:/var/lib/grafana
    networks:
      - backend
    labels:
      container_group: monitoring
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      labels:
        traefik.tags: 'grafana'
        traefik.port: '3000'
        traefik.frontend.rule: 'Host:prometheus.ghn.me,logs.ghn.me,monitor.ghn.me;PathPrefix:/'
        traefik.backend.loadbalancer.sticky: 'true'
  prometheus:
    image: prom/prometheus:v2.5.0
    hostname: prometheus
    configs:
      - source: alertrules.yml_v4
        target: /etc/prometheus/alertrules.yml
      - source: prometheus.yml_v4
        target: /etc/prometheus/prometheus.yml
    volumes:
      - /data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=15d'
    ports:
      - '9090:9090'
    networks:
      - backend
    labels:
      container_group: monitoring
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  alertmanager:
    image: prom/alertmanager:v0.15.3
    hostname: alertmanager
    secrets:
      - source: alertmanager_config.yml_v1
        target: /etc/alertmanager/config.yml
    volumes:
      - /data/alertmanager:/alertmanager
    command:
      - '--storage.path=/alertmanager'
      - '--config.file=/etc/alertmanager/config.yml'
    ports:
      - '9093:9093'
    networks:
      - backend
    labels:
      container_group: monitoring
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  rsyslog:
    image: vladgh/rs:latest
    hostname: logs.ghn.me
    environment:
      LOGZIO_TOKEN_FILE: '/run/secrets/logzio_token'
      CA_CERT: '/run/secrets/logs-combined-ca-cert.pem'
      SERVER_CERT: '/run/secrets/logs-server-cert.pem'
      SERVER_KEY: '/run/secrets/logs-server-key.pem'
      TIME_ZONE: 'US/Central'
      REMOTE_LOGS_PATH: '/data/logs'
    secrets:
      - source: logs-combined-ca-cert.pem_v1
        target: logs-combined-ca-cert.pem
      - source: logs-server-cert.pem_v1
        target: logs-server-cert.pem
      - source: logs-server-key.pem_v1
        target: logs-server-key.pem
      - source: logzio_token_v1
        target: logzio_token
    volumes:
      - /data/logs:/data/logs
    ports:
      - '10514:10514'
    networks:
      - frontend
    labels:
      container_group: logs
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  logrotate:
    image: blacklabelops/logrotate:1.2
    hostname: logrotate-prometheus
    environment:
      LOGS_DIRECTORIES: '/data/logs'
      LOGROTATE_INTERVAL: 'daily'
      LOGROTATE_COPIES: '90'
      LOGROTATE_COMPRESSION: 'compress'
      LOGROTATE_OLDDIR: '/data/logs/archive'
      TZ: 'US/Central'
    volumes:
      - /data/logs:/data/logs
    networks:
      - backend
    labels:
      container_group: logs
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  backup:
    image: vladgh/backup:latest
    hostname: backup-prometheus
    environment:
      AWS_S3_BUCKET: 'vgbak-prometheus'
      GPG_RECIPIENT: 'vlad@ghn.me'
      GPG_KEY_URL: 'https://keybase.io/vgh/key.asc'
    command: cron
    volumes:
      - /data:/backup
    networks:
      - backend
    labels:
      container_group: backup
    deploy:
      placement:
        constraints:
          - node.labels.role == prometheus
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  log:
    image: vladgh/ls:latest
    hostname: logs-prometheus
    environment:
      BACKLOG: 'false'
      EXCLUDE_LABEL: 'logspout.exclude'
    command: syslog+tls://logs.ghn.me:10514
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    labels:
      container_group: logs
    deploy:
      mode: global
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
  cadvisor:
    image: google/cadvisor:v0.32.0
    hostname: cadvisor-prometheus
    volumes:
      - /:/rootfs:ro
      - /dev/disk/:/dev/disk:ro
      - /sys:/sys:ro
      - /var/run:/var/run:rw
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - '9101:8080'
    networks:
      - backend
    labels:
      container_group: monitoring
    deploy:
      mode: global
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s

secrets:
  alertmanager_config.yml_v1:
    external: true
  grafana_security_admin_password_v1:
    external: true
  grafana_smtp_password_v1:
    external: true
  grafana_smtp_user_v1:
    external: true
  logs-combined-ca-cert.pem_v1:
    external: true
  logs-server-cert.pem_v1:
    external: true
  logs-server-key.pem_v1:
    external: true
  logzio_token_v1:
    external: true

configs:
  alertrules.yml_v4:
    external: true
  prometheus.yml_v4:
    external: true

networks:
  frontend:
    ipam:
      config:
        - subnet: 10.0.1.0/24 # Should not conflict with the AWS VPC
  backend:
    ipam:
      config:
        - subnet: 10.0.2.0/24 # Should not conflict with the AWS VPC
