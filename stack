#!/usr/bin/env bash
# Stack CLI

# Usage
usage(){
  echo '---------------------------------------------'
  echo "USAGE: ${BASH_SOURCE[0]} [COMMAND] [OPTIONS]"
  echo '---------------------------------------------'
  echo 'Commands:'
  echo ''
  echo '  - deploy [NAME]'
  echo ''
  echo '----------------------------------------------'
  echo 'For more information please consult the README'
  echo '----------------------------------------------'
  exit 1
}

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# Debug
[ -z "${DEBUG:-}" ] || set -x

# System VARs
NOW="$(date +"%Y%m%d_%H%M%S")"
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
APPDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
VERSION=$(git --git-dir="${APPDIR}/.git" --work-tree="${APPDIR}" describe --always --tags)
export NOW TMPDIR APPDIR VERSION

# Load encrypted environment
# shellcheck disable=1090
. <( gpg --decrypt --passphrase "$(echo "$ENCRYPT_KEY" | base64 --decode)" --batch --yes .env.gpg ) 2>/dev/null || true

# Output
e_ok()    { printf "  ✔  %s\\n" "$@" ;}
e_info()  { printf "  ➜  %s\\n" "$@" ;}
e_error() { printf "  ✖  %s\\n" "$@" ;}
e_warn()  { printf "    %s\\n" "$@" ;}
e_abort() { e_error "$1"; return "${2:-1}" ;}

# Set-up SSH
ssh_setup(){
  e_info 'Set-up SSH'

  SSH_HOST="${SSH_HOST:-?Must specify SSH_HOST}"
  SSH_USER="${SSH_USER:-ubuntu}"

  # Register new SSH agent instance
  if ! ps -p "${SSH_AGENT_PID:-''}" >/dev/null 2>&1; then
    eval "$(ssh-agent -s)"
    NEW_SSH_AGENT_PID="$SSH_AGENT_PID"
  fi

  # Add SSH key to agent
  ssh-add - <<<"$(echo "${DEPLOY_RSA:-}" | base64 --decode --ignore-garbage)"

  #
  SSH_CMD="ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null ${SSH_USER}@${SSH_HOST}"
}

# Deploy
deploy(){
  local stack="${1:-?Stack name is required}"

  ssh_setup

  e_info 'Deploy stack'
  case "$STACK_TYPE" in
    swarm)
      ( eval "$SSH_CMD" "sudo docker stack deploy --prune --compose-file /dev/stdin ${stack}" ) < "${APPDIR}/swarm/${stack}.yml"
      ;;
    compose)
      ( envsubst < "${APPDIR}/compose/${stack}.yml" | eval "$SSH_CMD" "sudo docker-compose --project-name ${stack} --file - pull" )
      ( envsubst < "${APPDIR}/compose/${stack}.yml" | eval "$SSH_CMD" "sudo docker-compose --project-name ${stack} --file - up -d --remove-orphans" )
      ;;
  esac
}

# Clean-up
clean_up() {
  if [[ "${CI:-false}" == 'true' ]]; then
    if [[ -s "${APPDIR}/.env" ]]; then
      e_info 'Removing .env'
      shred -fu "${APPDIR:?}/.env"
    fi
  fi

  if [[ -n "${NEW_SSH_AGENT_PID:-}" ]]; then
    e_info 'Stopping SSH Agent instance'
    kill "$NEW_SSH_AGENT_PID"
  fi
}

# Process CLI
process_cli(){
  trap 'clean_up' EXIT HUP INT QUIT TERM
  if [[ -z $1 ]]; then usage; fi

  local cmd stack
  cmd="${1:-}"; shift || true
  stack="${1:-}"; shift || true

  # Defaults
  export SSH_USER='deploy'

  case "$stack" in
    monitor)
      export SSH_HOST='prometheus.ghn.me'
      export STACK_TYPE='swarm'
      ;;
    vault)
      export SSH_HOST='prometheus.ghn.me'
      export STACK_TYPE='compose'
      echo 'Stack not available'; exit
      ;;
    *)
      echo 'Stack name not recognized!';
      usage
      ;;
  esac

  case "$cmd" in
    deploy)
      deploy "$stack"
      ;;
    *)
      usage
      ;;
  esac
}

process_cli "${@:-}"
